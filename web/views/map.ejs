<!DOCTYPE html>
<html lang="zh-TW">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>food●點餐系統</title>
    <!-- Bootstrap css-->
    <link href="css/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="css/main1.css" />
    <!-- Bootstrap js-->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="css/map.css" />
</head>

<body>
    <%- include('./partials/headermerch.ejs') %>

        <div class="container" style="margin-top:50px;padding-bottom: 30px">
            <h2 class="h2">地圖設定</h2>
            <ul id="myTab1" class="nav nav-tabs">
                <li class="active"><a href="#confirm" data-toggle="tab">匯入目前地圖</a></li>
                <li><a href="#done" data-toggle="tab">設定新地圖</a></li>
            </ul>
        </div>
        <div class="container">
            <div class="container">
                <!-- 新增長度單位和寬度單位的按鈕 -->
                <button id="lengthWidthUnitButton">設定長度寬度</button>
                <button id="barrier" style="background-color: black; color: white;">障礙物</button>
                <button id="counter" style="background-color: rgba(0, 128, 0, 0.8); color: white">櫃台</button>
                <button id="kitchen" style="background-color: rgba(255, 255, 0, 0.5);">廚房</button>
                <input type="number" min="1" step="1" id="tablnum" placeholder="請輸入桌號">
                <button id="table" style="background-color: rgba(0, 0, 255, 0.8); color: white">確認桌號</button>
                <button id="upload">上傳</button>
                <!-- 長度和寬度輸入框，預設隱藏 -->
                <div id="lengthWidthInput" class="input-container" style="display: none;">
                    <input type="number" id="lengthValue" min="1" step="1" placeholder="請輸入長度" />
                    <input type="number" id="widthValue" min="1" step="1" placeholder="請輸入寬度" />
                    <button id="lengthWidthConfirmButton">確定</button>
                </div>

                <h4>設定桌號</h4>

                <!-- 顯示矩陣的HTML表格 -->
                <div id="matrixContainer" style="display: none;">
                    <table id="matrixTable"></table>
                </div>
            </div>
        </div>
</body>

<script>
    // 變數來儲存長度和寬度值
    let lengthValue = 0;
    let widthValue = 0;
    let matrix = []; // 矩陣用來儲存0和1

    // 當頁面載入完成後，載入原始地圖，並且綁定按鈕點擊事件處理函數
    document.addEventListener('DOMContentLoaded', function () {
        showmaps();
        const lengthWidthUnitButton = document.getElementById('lengthWidthUnitButton');
        const lengthWidthInput = document.getElementById('lengthWidthInput');
        const lengthValueInput = document.getElementById('lengthValue');
        const widthValueInput = document.getElementById('widthValue');
        const lengthWidthConfirmButton = document.getElementById('lengthWidthConfirmButton');
        const confirmButton = document.getElementById('confirmButton');
        const matrixContainer = document.getElementById('matrixContainer');
        const matrixTable = document.getElementById('matrixTable');

        // 顯示長度和寬度輸入框
        lengthWidthUnitButton.addEventListener('click', function () {
            lengthWidthInput.style.display = 'block';
        });

        // 長度和寬度確定按鈕點擊事件處理
        lengthWidthConfirmButton.addEventListener('click', function () {
            const length = parseInt(lengthValueInput.value);
            const width = parseInt(widthValueInput.value);
            if (length && length > 0 && width && width > 0) {
                lengthWidthInput.style.display = 'none';
                // 將長度和寬度值儲存到全域變數中   
                lengthValue = length;
                widthValue = width;

                // 初始化矩陣為全為0的矩陣
                matrix = Array.from({ length: lengthValue }, () => Array(widthValue).fill(0));

                // 產生矩陣的HTML表格
                generateMatrixTable();

                // 顯示矩陣的HTML表格
                matrixContainer.style.display = 'block';
            } else {
                alert('請輸入有效的長度和寬度！');
            }
        });

        // 確定按鈕點擊事件處理
        lengthWidthConfirmButton.addEventListener('click', function () {
            if (matrix.length > 0 && matrix[0].length > 0) {
                // 顯示矩陣的HTML表格
                matrixContainer.style.display = 'block';
            } else {
                alert('請先設定有效的長度和寬度！');
            }
        });
    });
    // 載入原本的地圖
    function showmaps(){
        var initmaps = JSON.parse(JSON.stringify(<%-JSON.stringify(maps)%>))
        matrix = initmaps;
        lengthValue = initmaps.length;
        widthValue = initmaps[0].length;
        if(lengthValue!=0&&widthValue!=0){
            generateMatrixTable();
            updateMatrixTableColor();
            matrixContainer.style.display = 'block';
        }
    }

    // 初始化矩陣顏色
    function initColorMatrix() {
        for (let i = 0; i < lengthValue; i++) {
            colorMatrix.barrier.push(Array(widthValue).fill('black'));
            colorMatrix.counter.push(Array(widthValue).fill('green'));
            colorMatrix.kitchen.push(Array(widthValue).fill('yellow'));
            colorMatrix.table.push(Array(widthValue).fill('blue'));
        }
    }

    // 點擊矩陣元素時，在0和1之間進行轉換
    function toggleCellValue(row, col) {
        if (!(matrix[row][col] === 0)) matrix[row][col] = 0;
        else matrix[row][col] = 0.5;
        generateMatrixTable(); // 更新矩陣的HTML表格
        updateMatrixTableColor(); // 更新矩陣的HTML表格顏色
    }
    // 產生矩陣的HTML表格
    function generateMatrixTable() {    
        const matrixTable = document.getElementById('matrixTable');
        matrixTable.innerHTML = '';

        for (let i = 0; i < lengthValue; i++) {
            const row = document.createElement('tr');
            for (let j = 0; j < widthValue; j++) {
                const cell = document.createElement('td');
                cell.dataset.row = i; // 設定data屬性來儲存矩陣元素的位置
                cell.dataset.col = j;
                cell.addEventListener('click', function () {
                    toggleCellValue(i, j);
                });
                row.appendChild(cell);
            }
            matrixTable.appendChild(row);
        }
    }

    // 更新矩陣的HTML表格顏色
    function updateMatrixTableColor() {
        const matrixTable = document.getElementById('matrixTable');
        for (let i = 0; i < lengthValue; i++) {
            for (let j = 0; j < widthValue; j++) {
                const cell = matrixTable.rows[i].cells[j];
                const type = matrix[i][j];
                switch (type) {
                    case 0:
                        cell.style.backgroundColor = 'white';
                        break;
                    case 0.5:
                        cell.style.backgroundColor = 'gray';
                        break;
                    case -1:
                        cell.style.backgroundColor = 'black';
                        break;
                    case -2:
                        cell.style.backgroundColor = 'green';
                        break;
                    case -3:
                        cell.style.backgroundColor = 'yellow';
                        break;
                    default:
                        cell.style.backgroundColor = 'blue';
                        cell.innerHTML = matrix[i][j];
                        break;
                }
            }
        }
    }
    // 更改矩陣元素的顏色並同步更新matrix裡面的值
    function changeColor(type, tableNumber) {
        const matrixTable = document.getElementById('matrixTable');
        for (let i = 0; i < lengthValue; i++) {
            for (let j = 0; j < widthValue; j++) {
                const cell = matrixTable.rows[i].cells[j];
                if (matrix[i][j] === 0.5) {
                    // 如果矩陣元素為0.5，表示是灰色方塊
                    switch (type) {
                        case 'barrier':
                            matrix[i][j] = -1;
                            break;
                        case 'counter':
                            matrix[i][j] = -2;
                            break;
                        case 'kitchen':
                            matrix[i][j] = -3;
                            break;
                        case 'table':
                            matrix[i][j] = tableNumber;
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        updateMatrixTableColor(); // 更新矩陣的HTML表格顏色
    }
    function checkTwoDimensionalArray(arr) {
        const setValues = new Set();
        let hasUnsetValues = false;
        let hasDuplicateTableNumbers = false;

        for (let i = 0; i < arr.length; i++) {
            for (let j = 0; j < arr[i].length; j++) {
                const value = arr[i][j];

                if (value === 0.5) {
                    hasUnsetValues = true;
                } else if (value >= 1) {
                    if (setValues.has(value)) {
                        hasDuplicateTableNumbers = true;
                    } else {
                        setValues.add(value);
                    }
                }
            }
        }
        if (!hasUnsetValues && !hasDuplicateTableNumbers) {
            console.log('correct maps')
            return true;
        }
        else if (hasUnsetValues && hasDuplicateTableNumbers) {
            alert('仍有尚未設定的值，且桌號重覆');
            return false;
        }
        else if (hasUnsetValues) {
            alert('仍有尚未設定的值');
            return false;
        }
        else if (hasDuplicateTableNumbers) {
            alert('桌號重覆');
            return false;
        }
    }


    // 當障礙物按鈕被點擊時
    document.getElementById('barrier').addEventListener('click', function () {
        changeColor('barrier'); // 將灰色的方塊換成障礙物的顏色
    });

    // 當櫃台按鈕被點擊時
    document.getElementById('counter').addEventListener('click', function () {
        changeColor('counter'); // 將灰色的方塊換成櫃台的顏色
    });

    // 當廚房按鈕被點擊時
    document.getElementById('kitchen').addEventListener('click', function () {
        changeColor('kitchen'); // 將灰色的方塊換成廚房的顏色
    });

    // 當桌子按鈕被點擊時
    document.getElementById('table').addEventListener('click', function () {
        // 將灰色的方塊換成桌子的顏色並設定桌號
        const tableNumber = parseInt(document.getElementById('tablnum').value);
        if (!isNaN(tableNumber) && tableNumber > 0) {
            document.getElementById('tablnum').value = tableNumber + 1;
            changeColor('table', tableNumber);
        } else {
            alert('請輸入有效的桌號！');
        }
    });
    document.getElementById('upload').addEventListener('click', function () {

        if (matrix.length === 0)
            alert("Empty data.");
        else if (checkTwoDimensionalArray(matrix)) {
            fetch(`/map/upload`, {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(matrix)
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data); // 在控制台中輸出回應的 JSON 數據
                    alert(data.status); // 顯示回應的 JSON 數據
                })
                .catch(error => {
                    console.error('Error occurred:', error);
                    // 處理發生在 fetch 中的任何錯誤
                });
        }

    })
</script>

</html>